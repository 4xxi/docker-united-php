name: Docker Build

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

env:
  DOCKER_IMAGE: 4xxi/united-php
  DOCKER_COMPOSE_VERSION: v2.6.0
  OS_VERSION: alpine3.15

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php_version: [7.4.33, 8.0.25, 8.1.12]
        os_verion: [alpine3.15]
        # php_version: [8.0.20]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get the version
        id: get_version
        run: |
          VERSION=${{ matrix.php_version }}
          PREFIX="edge-"
          SUFFIX="-${{ matrix.os_verion }}"
          LATEST_TAG=edge
          LATEST_TAGS="${DOCKER_IMAGE}:edge,${DOCKER_IMAGE}:unstable"

          if [[ $VERSION == "latest" ]]; then
              SUFFIX=""
          fi

          if [[ $GITHUB_REF == refs/tags/* && ${VERSION:5:5} != "alpha" ]]; then
              PREFIX=""
              LATEST_TAG=stable
              LATEST_TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:stable"
          fi

          echo ::save-state name=prefix::${PREFIX}
          echo ::save-state name=suffix::${SUFFIX}
          echo ::save-state name=minor_version::${VERSION:0:3}
          echo ::save-state name=full_version::${VERSION}
          echo ::save-state name=latest_tag::${LATEST_TAG}
          echo ::save-state name=latest_tags::${LATEST_TAGS}

      - name: Prepare
        id: prepare
        env:
          PHP_VERSION: ${{ steps.get_version.states.minor_version }}
          FULL_PHP_VERSION: ${{ steps.get_version.states.full_version }}
        run: |
          echo ::save-state name=docker_image::${DOCKER_IMAGE}
          echo ::save-state name=minor_version::${PHP_VERSION}
          echo ::save-state name=patch_version::${FULL_PHP_VERSION}

      - name: Build and Push (latest)
        if: success() && matrix.php_version == 'latest'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
          cache-to: type=inline
          tags: ${{ steps.get_version.states.latest_tags }}
          build-args: |
            VERSION=${{ steps.get_version.states.latest_tag }}
            PHP_VERSION=alpine
            FULL_PHP_VERSION=alpine
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${GITHUB_SHA::8}

      - name: Build and Push (version)
        if: success() && matrix.php_version != 'latest'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ steps.prepare.states.minor_version }}
          cache-to: type=inline
          push: true
          tags: |
            ${{ steps.prepare.states.docker_image }}:${{ steps.get_version.states.prefix }}${{ steps.prepare.states.minor_version }}
            ${{ steps.prepare.states.docker_image }}:${{ steps.get_version.states.prefix }}${{ steps.prepare.states.patch_version }}
          build-args: |
            VERSION=${{ steps.get_version.states.prefix }}${{ steps.prepare.states.patch_version }}
            PHP_VERSION=${{ steps.prepare.states.minor_version }}
            FULL_PHP_VERSION=${{ steps.prepare.states.patch_version }}${{ steps.get_version.states.suffix }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${GITHUB_SHA::8}

      - name: Inspect (latest)
        if: success() && matrix.php_version == 'latest'
        run: docker buildx imagetools inspect ${{ steps.prepare.states.docker_image }}:${{ steps.get_version.states.latest_tag }}

      - name: Inspect (version)
        if: success() && matrix.php_version != 'latest'
        run: |
          docker buildx imagetools inspect ${{ steps.prepare.states.docker_image }}:${{ steps.get_version.states.prefix }}${{ steps.prepare.states.minor_version }}
          docker buildx imagetools inspect ${{ steps.prepare.states.docker_image }}:${{ steps.get_version.states.prefix }}${{ steps.prepare.states.patch_version }}

      # - name: Setup docker-compose
      # - run: sudo curl -L https://github.com/docker/compose/releases/download/${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
      # - run: sudo chmod +x /usr/local/bin/docker-compose

      # - name: Build the stack
      #   run: PHP_VERSION=${{ steps.prepare.states.minor_version }} docker-compose up --no-build -d
      # - name: Test phpinfo
      #   run: docker run --network container:phpinfo alpine/curl -s --retry 10 --retry-connrefused http://localhost:8080/
      # - name: Test Symfony app
      #   run: docker run --network container:phpinfo alpine/curl -s --retry 10 --retry-connrefused http://localhost:8181/
      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v1
